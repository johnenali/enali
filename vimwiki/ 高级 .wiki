# 函数设计时，应考虑耦合性和聚合性。
# 耦合性：对于输入使用参数，对于输出使用return语句。
# 聚合性：每个函数应有单一，统一的目标。
# 在文件间改变变量会导致模块文件间的耦合性，就像全局变量产生了函数间接耦合一样。
# 递归函数：允许程序遍历拥有任意的，不可预知的形状的结构。
# 函数对参数的属性需求决定了函数的参数适应范围,如使用参数的分片,则参数可为序列。
# 递归在python中并不像在Prolog或Lisp这样更加深奥的语言中那样常用，python更强调像循环这样简单的过程式语句。
# 函数属于通过对象，有像数字，列表，字典对象等的属性。dir(func)
# 通过向函数附加任意属性，直接把状态信息附加到函数对象，而不使用全局变量、非本地和类等其他技术。属性与对象相关而非作用域。
# 3.0：函数注解：出现在紧随参数名后的冒号后，对于返回值则编写于紧跟参数列表后的'->'后。
{{{
    def func(a:'spam' = 'abc', b:(1:10)) -> int:
        return a+b
    附加于函数对象__annotations__属性中
}}}
# lambda表达式：lambda argument1, arg2=value,....:expression 
# lambda为编写简单函数而设计的，而def用来处理更大的任务。
{{{
    lambda常用来编写跳转表
    L = [lambda x:x**2, lambda x:x**3, lambda x:x**4]
    for f in L:
        print(f(x))
    }}}
# python: 2.X中print是语句； 3.X中print是函数表达式
# map(func, seq1, seq...)内置函数，可接受多个序列，以每个序列中元素作为函数对应参数。对于多参数函数的需求。
